import PushNotification from 'react-native-push-notification';
import { PushNotificationIOS } from 'react-native';

const configure = () => {
 PushNotification.configure({

   onRegister: function(token) {
	   console.log( 'TOKEN:', token );
     //process token
	   
   },

   onNotification: function(notification) {
	   console.log( 'NOTIFICATION:', notification );

	         // process the notification

	         // required on iOS only (see fetchCompletionHandler docs: https://facebook.github.io/react-native/docs/pushnotificationios.html)
	         notification.finish(PushNotificationIOS.FetchResult.NoData);
   },
   
  // ANDROID ONLY: GCM Sender ID (optional - not required for local notifications, but is need to receive remote push notifications)
    senderID: "YOUR GCM SENDER ID",

// IOS ONLY (optional): default: all - Permissions to register.
   permissions: {
     alert: true,
     badge: true,
     sound: true
   },

// Should the initial notification be popped automatically
    // default: true
   popInitialNotification: true,
   
/**
      * (optional) default: true
      * - Specified if permissions (ios) and token (android and ios) will requested or not,
      * - if not, you must call PushNotificationsHandler.requestPermissions() later
      */
   requestPermissions: true,

 });
};

const localNotification = () => {
	
 PushNotification.localNotification({
 /* Android Only Properties */
     id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
     ticker: "My Notification Ticker", // (optional)
     autoCancel: true, // (optional) default: true
     largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
     smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
     bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
     subText: "This is a subText", // (optional) default: none
     color: "red", // (optional) default: system default
     vibrate: true, // (optional) default: true
     vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
     tag: 'some_tag', // (optional) add tag to message
     group: "group", // (optional) add group to message
     ongoing: false, // (optional) set whether this is an "ongoing" notification

     // /* iOS only properties */
     alertAction: "view", // (optional) default: view
     category: "SOME_CATEGORY", // (optional) default: null
     userInfo: {}, // (optional) default: null (object containing additional notification data)

     /* iOS and Android properties */
     title: "My Notification Title", // (optional)
     message: "My Notification Message", // (required)
     playSound: false, // (optional) default: true
     soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
     number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
     repeatType: 'day', // (Android only) Repeating interval. Could be one of `week`, `day`, `hour`, `minute, `time`. If specified as time, it should be accompanied by one more parameter 'repeatTime` which should the number of milliseconds between each interval
     actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
 });
};

const scheduledNotifications = () => {
PushNotification.localNotificationSchedule({
  message: "My Notification Message", // (required)
  date: new Date(Date.now() + (6 * 1000)) // in 6 secs
});
};

const cancelLocalNotifications = () => {
PushNotification.cancelLocalNotifications({id: '123'});
};

const cancelAllLocalNotifications = () => {
PushNotification.cancelAllLocalNotifications()
};

const setApplicationBadgeIcon = () => {
	PushNotification.setApplicationIconBadgeNumber(number: number)
};


const checkPermissions = () => {
PushNotification.checkPermissions(callback: Function)
};

const getApplicationIconBadgeNumber = () => {
PushNotification.getApplicationIconBadgeNumber(callback: Function) 
};

const abandonPermissions = () => {
PushNotification.abandonPermissions()
};

export {
 configure,
 localNotification,
	scheduledNotifications,
	cancelLocalNotifications,
	cancelAllLocalNotifications,
	setApplicationBadgeIcon,
	checkPermissions,
	getApplicationIconBadgeNumber,
	abandonPermissions
};